<?php

namespace Tests\Feature;

use Tests\TestCase;
use App\Notifications\ThreadWasUpdated;
use Illuminate\Support\Facades\Notification;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Notifications\DatabaseNotification;

class NotificationTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->signIn();
    }

    /** @test */
    public function a_notifications_is_prepared_when_a_subscribed_thread_received_a_new_reply_that_is_not_by_current_user()
    {
        //create(DatabaseNotification::class);
        $thread = create('App\Thread')->subscribe();

        $this->assertCount(0, auth()->user()->fresh()->notifications);

        $reply = $thread->addReply([
            'user_id' => auth()->id(),
            'body'    => 'body',
        ]);

        $this->assertCount(0, auth()->user()->fresh()->notifications);

        $thread->addReply([
            'user_id' => create('App\User')->id,
            'body'    => 'body',
        ]);

        $this->assertCount(1, auth()->user()->notifications);
    }

    /** @test */
    public function a_thread_send_notification_to_all_subscribers_when_a_reply_is_left()
    {
        Notification::fake();

        $this->signIn();

        create('App\Thread')->subscribe()
             ->addReply([
                 'user_id' => create('App\User')->id,
                 'body'    => 'body',
             ]);

        Notification::assertSentTo(auth()->user(), ThreadWasUpdated::class);
    }

    /** @test */
    public function user_can_fetch_their_unread_notification()
    {
        create(DatabaseNotification::class);

        $user = auth()->user();
        $endpoint = "/profiles/{$user->name}/notifications/";

        //$response = $this->getJson($endpoint)->json();
        $response = $this->getJson($endpoint)->json();

        $this->assertCount(1, $response);
    }

    /** @test */
    public function user_can_mark_their_notification_as_read()
    {
        create(DatabaseNotification::class);

        tap(auth()->user(), function ($user) {
            $this->assertCount(1, $user->unreadNotifications);

            $notificationId = $user->unreadNotifications->first()->id;

            $endpoint = '/profiles/'.$user->name."/notifications/{$notificationId}";
            $this->delete($endpoint);
            $this->assertCount(0, $user->fresh()->unreadNotifications);
        });
    }
}
