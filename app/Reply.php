<?php

namespace App;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

class Reply extends Model
{
    
    use Favoritable, RecordActivity;
    
    protected $guarded = [];
    protected $with = ['owner', 'favorites'];
    protected $appends = ['favoritesCount', 'isFavorited', 'isBest'];
    
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::created(function ($reply){
            $reply->thread->increment('replies_count');
            Reputation::award($reply->owner, Reputation::REPLY_WAS_PUBLISHED);
        });
        static::deleted(function ($reply){
            //if ($reply->isBest()){
            //    $reply->thread->update(['best_reply_id' => null]);
            //}
            $reply->thread->decrement('replies_count');
        });
    }
    
    
    //
    public function owner()
    {
        return $this->belongsTo('App\User', 'user_id');
    }
    
    public function thread()
    {
        return $this->belongsTo('App\Thread');
    }
    
    public function path()
    {
        return $this->thread->path() . "#reply-{$this->id}";
    }
    
    public function mentionedUsers()
    {
        preg_match_all('/@([\w\-]+)/', $this->body, $matches);
        //dd($matches);
        
        return $matches[1];
    }
    
    public function setBodyAttribute($body)
    {
        $this->attributes['body'] = preg_replace(
        //'/@([^\s]+)/',
            '/@([\w\-]+)/',
            "<a href='/profiles/$1'>$0</a>",
            $body
        );
    }
    
    
    public function wasJustPublished()
    {
        return $this->created_at->gt(Carbon::now()->subMinute());
    }
    
    public function isBest()
    {
        return $this->thread->best_reply_id == $this->id;
    }
    
    public function getIsBestAttribute()
    {
        return $this->isBest();
    }
    
    
}
